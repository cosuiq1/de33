nombre: RDPq

en:
  flujo de trabajo_despacho:

trabajos:
  seguro-rdp:
    se ejecuta en: windows-latest
    minutos de tiempo de espera: 3600

    pasos:
      - nombre: Configurar ajustes básicos de RDP
        correr: |
          # Habilitar Escritorio remoto y deshabilitar la autenticación a nivel de red (si es necesario)
          Establecer-PropiedadDeElemento -Ruta 'HKLM:\Sistema\CurrentControlSet\Control\Terminal Server' `
                             -Nombre "fDenyTSConnections" -Valor 0 -Forzar
          Establecer-PropiedadDeElemento -Ruta 'HKLM:\Sistema\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Nombre "Autenticación de usuario" -Valor 0 -Forzar
          Establecer-PropiedadDeElemento -Ruta 'HKLM:\Sistema\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Nombre "Capa de Seguridad" -Valor 0 -Forzar

          # Elimine cualquier regla existente con el mismo nombre para evitar la duplicación
          Regla de eliminación del firewall netsh advfirewall nombre="RDP-Tailscale"
          
          # Para realizar pruebas, permita cualquier conexión entrante en el puerto 3389
          netsh advfirewall firewall agregar regla nombre="RDP-Tailscale" `
            dir=en acción=permitir protocolo=TCP puerto local=3389

          # (Opcional) Reinicie el servicio de Escritorio remoto para garantizar que los cambios surtan efecto
          Reiniciar-Servicio-Nombre TermService-Force

      - nombre: Crear usuario RDP con contraseña segura
        correr: |
          Agregar-Tipo -NombreDeEnsamblaje Sistema.Seguridad
          $conjunto de caracteres = @{
              Superior = [char[]](65..90) # AZ
              Inferior = [char[]](97..122) # az
              Número = [char[]](48..57) # 0-9
              Especial = ([char[]](33..47) + [char[]](58..64) +
                         [char[]](91..96) + [char[]](123..126)) # Caracteres especiales
          }
          $contraseña sin procesar = @()
          $rawPassword += $charSet.Upper | Obtener aleatorio -Contar 4
          $rawPassword += $charSet.Lower | Obtener aleatorio -Count 4
          $rawPassword += $charSet.Number | Obtener-Aleatorio -Contar 4
          $rawPassword += $charSet.Special | Obtener aleatorio -Count 4
          $contraseña = -join ($contraseña_sin_usar | Objeto_de_ordenamiento { Obtener_aleatorio })
          $securePass = Convertir a cadena segura $contraseña -AsPlainText -Force
          Nuevo-UsuarioLocal -Nombre "RDP" -Contraseña $securePass -La CuentaNuncaExpira
          Agregar-MiembroDeGrupoLocal -Grupo "Administradores" -Miembro "RDP"
          Add-LocalGroupMember -Grupo "Usuarios de Escritorio Remoto" -Miembro "RDP"
          
          echo "RDP_CREDS=Usuario: RDP | Contraseña: $password" >> $env:GITHUB_ENV
          
          si (-no (Get-LocalUser -Name "RDP")) {
              Error de escritura "Error en la creación del usuario"
              salida 1
          }

      - nombre: Instalar Tailscale
        correr: |
          $tsUrl = " https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi "
          $installerPath = "$env:TEMP\tailscale.msi"
          
          Invocar-WebRequest -Uri $tsUrl -OutFile $installerPath
          Proceso de inicio msiexec.exe -Lista de argumentos "/i", "`"$installerPath`"", "/quiet", "/norestart" -Esperar
          Eliminar elemento $installerPath -Force

      - nombre: Establecer conexión de Tailscale
        correr: |
          # Abra Tailscale con la clave de autorización proporcionada y configure un nombre de host único
          & "$env:Archivos de programa\Tailscale\tailscale.exe" arriba --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          
          # Espere a que Tailscale asigne una IP
          $tsIP = $null
          $reintentos = 0
          mientras (-no $tsIP -y $retries -lt 10) {
              $tsIP = & "$env:Archivos de programa\Tailscale\tailscale.exe" ip -4
              Inicio-Sueño-Segundos 5
              $reintentos++
          }
          
          si (-no $tsIP) {
              Error de escritura "IP de Tailscale no asignada. Saliendo".
              salida 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
      
      - nombre: Verificar la accesibilidad de RDP
        correr: |
          Host de escritura "IP de Tailscale: $env:TAILSCALE_IP"
          
          # Pruebe la conectividad usando Test-NetConnection contra la IP de Tailscale en el puerto 3389
          $testResult = Conexión-de-red-de-prueba -NombreDeComputadora $env:TAILSCALE_IP -Puerto 3389
          si (-no $testResult.TcpTestSucceeded) {
              Error de escritura "Error en la conexión TCP al puerto RDP 3389"
              salida 1
          }
          Write-Host "¡Conectividad TCP exitosa!"

      - nombre: Mantener la conexión
        correr: |
          Escritura-Host "`n=== ACCESO RDP ==="
          Write-Host "Dirección: $env:TAILSCALE_IP"
          Write-Host "Nombre de usuario: RDP"
          Write-Host "Contraseña: $(echo $env:RDP_CREDS)"
          Host de escritura "===================`n"
          
          # Mantener al corredor activo indefinidamente (o hasta que se cancele manualmente)
          mientras ($verdadero) {
              Write-Host "[$(Get-Date)] RDP activo: use Ctrl+C en el flujo de trabajo para finalizar"
              Inicio-Sueño-Segundos 300
          }
